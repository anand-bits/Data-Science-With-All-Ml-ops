{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":416528,"sourceType":"datasetVersion","datasetId":185987}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:21:24.225478Z","iopub.execute_input":"2024-05-01T15:21:24.226571Z","iopub.status.idle":"2024-05-01T15:21:25.441573Z","shell.execute_reply.started":"2024-05-01T15:21:24.226518Z","shell.execute_reply":"2024-05-01T15:21:25.440258Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/diabetes-dataset/diabetes2.csv')","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:32:55.415612Z","iopub.execute_input":"2024-05-01T15:32:55.416008Z","iopub.status.idle":"2024-05-01T15:32:55.425610Z","shell.execute_reply.started":"2024-05-01T15:32:55.415974Z","shell.execute_reply":"2024-05-01T15:32:55.424307Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:33:11.326152Z","iopub.execute_input":"2024-05-01T15:33:11.326578Z","iopub.status.idle":"2024-05-01T15:33:11.343651Z","shell.execute_reply.started":"2024-05-01T15:33:11.326545Z","shell.execute_reply":"2024-05-01T15:33:11.342445Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0            6      148             72             35        0  33.6   \n1            1       85             66             29        0  26.6   \n2            8      183             64              0        0  23.3   \n3            1       89             66             23       94  28.1   \n4            0      137             40             35      168  43.1   \n\n   DiabetesPedigreeFunction  Age  Outcome  \n0                     0.627   50        1  \n1                     0.351   31        0  \n2                     0.672   32        1  \n3                     0.167   21        0  \n4                     2.288   33        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:34:55.786048Z","iopub.execute_input":"2024-05-01T15:34:55.787135Z","iopub.status.idle":"2024-05-01T15:34:55.828624Z","shell.execute_reply.started":"2024-05-01T15:34:55.787090Z","shell.execute_reply":"2024-05-01T15:34:55.827289Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\ncount   768.000000  768.000000     768.000000     768.000000  768.000000   \nmean      3.845052  120.894531      69.105469      20.536458   79.799479   \nstd       3.369578   31.972618      19.355807      15.952218  115.244002   \nmin       0.000000    0.000000       0.000000       0.000000    0.000000   \n25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n75%       6.000000  140.250000      80.000000      32.000000  127.250000   \nmax      17.000000  199.000000     122.000000      99.000000  846.000000   \n\n              BMI  DiabetesPedigreeFunction         Age     Outcome  \ncount  768.000000                768.000000  768.000000  768.000000  \nmean    31.992578                  0.471876   33.240885    0.348958  \nstd      7.884160                  0.331329   11.760232    0.476951  \nmin      0.000000                  0.078000   21.000000    0.000000  \n25%     27.300000                  0.243750   24.000000    0.000000  \n50%     32.000000                  0.372500   29.000000    0.000000  \n75%     36.600000                  0.626250   41.000000    1.000000  \nmax     67.100000                  2.420000   81.000000    1.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n      <td>768.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.845052</td>\n      <td>120.894531</td>\n      <td>69.105469</td>\n      <td>20.536458</td>\n      <td>79.799479</td>\n      <td>31.992578</td>\n      <td>0.471876</td>\n      <td>33.240885</td>\n      <td>0.348958</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.369578</td>\n      <td>31.972618</td>\n      <td>19.355807</td>\n      <td>15.952218</td>\n      <td>115.244002</td>\n      <td>7.884160</td>\n      <td>0.331329</td>\n      <td>11.760232</td>\n      <td>0.476951</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.078000</td>\n      <td>21.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.000000</td>\n      <td>99.000000</td>\n      <td>62.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>27.300000</td>\n      <td>0.243750</td>\n      <td>24.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>3.000000</td>\n      <td>117.000000</td>\n      <td>72.000000</td>\n      <td>23.000000</td>\n      <td>30.500000</td>\n      <td>32.000000</td>\n      <td>0.372500</td>\n      <td>29.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.000000</td>\n      <td>140.250000</td>\n      <td>80.000000</td>\n      <td>32.000000</td>\n      <td>127.250000</td>\n      <td>36.600000</td>\n      <td>0.626250</td>\n      <td>41.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>17.000000</td>\n      <td>199.000000</td>\n      <td>122.000000</td>\n      <td>99.000000</td>\n      <td>846.000000</td>\n      <td>67.100000</td>\n      <td>2.420000</td>\n      <td>81.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.count()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:08:04.752311Z","iopub.execute_input":"2024-05-01T16:08:04.752844Z","iopub.status.idle":"2024-05-01T16:08:04.764720Z","shell.execute_reply.started":"2024-05-01T16:08:04.752801Z","shell.execute_reply":"2024-05-01T16:08:04.763257Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"Pregnancies                 768\nGlucose                     768\nBloodPressure               768\nSkinThickness               768\nInsulin                     768\nBMI                         768\nDiabetesPedigreeFunction    768\nAge                         768\nOutcome                     768\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"**Data Visulaization For cleaning**","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot  as plt\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:38:09.022094Z","iopub.execute_input":"2024-05-01T15:38:09.023577Z","iopub.status.idle":"2024-05-01T15:38:09.028726Z","shell.execute_reply.started":"2024-05-01T15:38:09.023533Z","shell.execute_reply":"2024-05-01T15:38:09.027399Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"columns=df.columns\ndisplay(columns\n       )","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:44:16.656370Z","iopub.execute_input":"2024-05-01T15:44:16.656764Z","iopub.status.idle":"2024-05-01T15:44:16.665340Z","shell.execute_reply.started":"2024-05-01T15:44:16.656736Z","shell.execute_reply":"2024-05-01T15:44:16.663844Z"},"trusted":true},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":"Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"labels = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:44:30.435543Z","iopub.execute_input":"2024-05-01T15:44:30.435917Z","iopub.status.idle":"2024-05-01T15:44:30.441594Z","shell.execute_reply.started":"2024-05-01T15:44:30.435887Z","shell.execute_reply":"2024-05-01T15:44:30.440358Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n\n\n\nplt.figure(figsize=(10, 6))  # Adjust the figure size\nbox = plt.boxplot(df,\n                  vert=True,\n                  patch_artist=True,\n                  labels=labels,\n                  medianprops=dict(color='orange'))  # Customize the median line color\n\n# Customizing colors for box and whiskers\ncolors = ['lightblue', 'lightgreen', 'lightyellow', 'lightpink']\nfor patch, color in zip(box['boxes'], colors):\n    patch.set_facecolor(color)  # Set box color\nfor whisker in box['whiskers']:\n    whisker.set(color='gray', linewidth=1.5)  # Set whisker color and width\nfor cap in box['caps']:\n    cap.set(color='gray', linewidth=1.5)  # Set cap color and width\nfor median in box['medians']:\n    median.set(color='red', linewidth=2)  # Set median line color and width\n\n# Add title and labels\nplt.title('Boxplot of Diabetes Dataset Features')\nplt.xlabel('Features')\nplt.ylabel('Values')\n\n# Customize grid lines\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Customize tick labels rotation\nplt.xticks(rotation=45)\n\n# Show plot\nplt.tight_layout()  # Adjust layout to prevent overlapping\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T15:45:19.505846Z","iopub.execute_input":"2024-05-01T15:45:19.506282Z","iopub.status.idle":"2024-05-01T15:45:19.943359Z","shell.execute_reply.started":"2024-05-01T15:45:19.506251Z","shell.execute_reply":"2024-05-01T15:45:19.942040Z"},"trusted":true},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAADJKklEQVR4nOzdeVzU1f7H8fcwgCIIrijmAso1N9TKFcM9zbQixDKztMy8qZVFVlhptuh1a8/UbmU325FrSqlpZZFyzVwqyl3QTNwVUFFk5vz+ML4/RlDBHAf09Xw8eiTne+Y7nzPfGZjP92w2Y4wRAAAAAAC44Lw8HQAAAAAAAJcqkm4AAAAAANyEpBsAAAAAADch6QYAAAAAwE1IugEAAAAAcBOSbgAAAAAA3ISkGwAAAAAANyHpBgAAAADATUi6AQAAAABwE5JuAIDb2Ww2PfPMM54Ow8WqVasUGRkpf39/2Ww2rVu37oKde/bs2bLZbEpPTy/xYzt37qxmzZpdsFgAAIBnkXQDQBmWn9wV/C84OFhdunTRwoULPR3e3/b777/rmWeeOa/k9WxOnjypfv366eDBg3rppZf0/vvvq169ekXWXbZsmcvrW65cOdWoUUOdO3fWhAkTtG/fvgsamztMmDBB8+bNu+jPm56e7vLa+fj4qFq1aoqMjNSYMWO0Y8eO8z73rl279Mwzz1zQmyV/x5dfflmiG0udO3cu9NnN/2/Dhg1uiXH69OmaPXu2W84NADgzb08HAAD4+5599lmFhYXJGKM9e/Zo9uzZuuGGG7RgwQL16dPH0+Gdt99//13jx49X586dFRoaesHOu3XrVm3fvl1vvfWW7r333mI95sEHH1Tr1q3lcDi0b98+rVixQuPGjdOLL76oTz/9VF27drXq3nnnnerfv7/KlSt3wWL+OyZMmKDY2FhFR0d75Plvv/123XDDDXI6nTp06JBWrVqll19+Wa+88orefvtt9e/fv8Tn3LVrl8aPH6/Q0FC1bNnywgddQl9++aXeeOONEiXetWvX1sSJEwuV16pV6wJG9v+mT5+uatWqafDgwW45PwCgaCTdAHAJ6NWrl1q1amX9PGTIENWoUUMfffRRmU663WXv3r2SpEqVKhX7MVFRUYqNjXUp+/nnn9WjRw/17dtXv//+u0JCQiRJdrtddrv9gsVb1l199dUaOHCgS9n27dvVo0cPDRo0SI0bN1aLFi08FJ3nBAUFFXpdyhpjjI4fPy4/Pz9PhwIApRbDywHgElSpUiX5+fnJ29v13urRo0cVFxenOnXqqFy5crryyis1depUGWMkSTk5OWrUqJEaNWqknJwc63EHDx5USEiIIiMj5XA4JEmDBw9WQECAtm3bpp49e8rf31+1atXSs88+a53vbNauXatevXopMDBQAQEB6tatm/73v/9Zx2fPnq1+/fpJkrp06WINvV22bNlZz/vNN98oKipK/v7+qlSpkm6++WatX7/eOj548GB16tRJktSvXz/ZbDZ17tz5nPEWpUWLFnr55Zd1+PBhvf766y6xnz6n+/PPP1fv3r1Vq1YtlStXTg0aNNBzzz1nvZ6nW716tSIjI+Xn56ewsDDNmDGjUJ0TJ05o3LhxCg8PV7ly5VSnTh099thjOnHihFXHZrPp6NGjeu+996zXsGBP559//ql77rlHNWrUULly5dS0aVO98847hZ7rtddeU9OmTVWhQgVVrlxZrVq10ocffnger9op9erV0+zZs5Wbm6vJkydb5QcPHtSjjz6qiIgIBQQEKDAwUL169dLPP/9s1Vm2bJlat24tSbr77rutduUPnU5OTla/fv1Ut25d63V5+OGHXd7TkrR7927dfffdql27tsqVK6eQkBDdfPPNhaYzLFy40HpPVaxYUb1799Zvv/1mHR88eLDeeOMNSXIZJv53Fef6StK7776rrl27Kjg4WOXKlVOTJk305ptvutQJDQ3Vb7/9pu+++86KL/99/8wzzxQZb1Hv49DQUPXp00eLFy9Wq1at5Ofnp5kzZ0qSDh8+rFGjRlm/X8LDwzVp0iQ5nU6X83788ce65pprVLFiRQUGBioiIkKvvPLK3369AKC0oqcbAC4BmZmZ2r9/v4wx2rt3r1577TUdOXLEpRfNGKObbrpJ3377rYYMGaKWLVtq8eLFGj16tP7880+99NJL8vPz03vvvacOHTroySef1IsvvihJGjFihDIzMzV79myXHlyHw6Hrr79e7dq10+TJk7Vo0SKNGzdOeXl5evbZZ88Y72+//aaoqCgFBgbqsccek4+Pj2bOnKnOnTvru+++U9u2bdWxY0c9+OCDevXVVzVmzBg1btxYkqz/F2Xp0qXq1auX6tevr2eeeUY5OTl67bXX1KFDB61Zs0ahoaEaNmyYrrjiCk2YMMEaMl6jRo3zfu1jY2M1ZMgQffXVV3rhhRfOWG/27NkKCAjQI488ooCAAH3zzTcaO3assrKyNGXKFJe6hw4d0g033KBbb71Vt99+uz799FPdf//98vX11T333CNJcjqduummm/TDDz/ovvvuU+PGjfXrr7/qpZde0qZNm6w53O+//77uvfdetWnTRvfdd58kqUGDBpKkPXv2qF27drLZbBo5cqSqV6+uhQsXasiQIcrKytKoUaMkSW+99ZYefPBBxcbG6qGHHtLx48f1yy+/aOXKlRowYMB5v3bt27dXgwYNtGTJEqts27Ztmjdvnvr166ewsDDt2bNHM2fOVKdOnfT777+rVq1aaty4sZ599lmNHTtW9913n6KioiRJkZGRkqTPPvtMx44d0/3336+qVavqxx9/1GuvvaadO3fqs88+s56rb9+++u233/TAAw8oNDRUe/fu1ZIlS7Rjxw5rOsP777+vQYMGqWfPnpo0aZKOHTumN998U9dee63Wrl1rvad27dqlJUuW6P333y92+x0Oh/bv3+9SVr58eQUEBBT7+krSm2++qaZNm+qmm26St7e3FixYoOHDh8vpdGrEiBGSpJdfflkPPPCAAgIC9OSTT0rSeb/vN27cqNtvv13Dhg3T0KFDdeWVV+rYsWPq1KmT/vzzTw0bNkx169bVihUrFB8fr4yMDL388suSpCVLluj2229Xt27dNGnSJEnS+vXrtXz5cj300EPnFQ8AlHoGAFBmvfvuu0ZSof/KlStnZs+e7VJ33rx5RpJ5/vnnXcpjY2ONzWYzW7Zsscri4+ONl5eX+f77781nn31mJJmXX37Z5XGDBg0ykswDDzxglTmdTtO7d2/j6+tr9u3bZ5VLMuPGjbN+jo6ONr6+vmbr1q1W2a5du0zFihVNx44drbL85/7222+L9Xq0bNnSBAcHmwMHDlhlP//8s/Hy8jJ33XWXVfbtt98aSeazzz475zmLU7dFixamcuXK1s/51yUtLc0qO3bsWKHHDRs2zFSoUMEcP37cKuvUqZORZKZNm2aVnThxwmpbbm6uMcaY999/33h5eZnk5GSXc86YMcNIMsuXL7fK/P39zaBBgwo9/5AhQ0xISIjZv3+/S3n//v1NUFCQFfPNN99smjZtesb2n0laWpqRZKZMmXLGOjfffLORZDIzM40xxhw/ftw4HI5C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Hz9u1bnjjjv022+/acmSJUpKStL333+v++67zxNNAgCgzEtMTFRsbKwiIiKUkpKi7OxspaSkKCIiQrGxsSTeAACUgM0YYzz15E888YSWL1+u5OTkIo8bY1SrVi3FxcXp0UcflSRlZmaqRo0amj17tvr376/169erSZMmWrVqlVq1aiVJWrRokW644Qbt3LlTtWrVOmccWVlZCgoKUmZmpgIDAy9cAwEAKGMcDofCw8MVERGhefPmycvr/+/PO51ORUdHKzU1VZs3b2aoOQDgslbcPNKjc7rnz5+vnj17ql+/fvruu+90xRVXaPjw4Ro6dKgkKS0tTbt371b37t2txwQFBalt27ZKSUlR//79lZKSokqVKlkJtyR1795dXl5eWrlypW655ZZCz3vixAmdOHHC+jkrK0uSlJeXp7y8PEmSl5eXvLy85HQ65XQ6rbr55Q6HQwXvV5yp3G63y2azWectWC6d+nJTnHJvb28ZY1zKbTab7HZ7oRjPVE6baBNtok20iTadq03JyclKT0/X+++/7/Ic+fVHjx6tjh07atmyZerUqVOZaNOleJ1oE22iTbSJNpWONhWHR5Pubdu26c0339QjjzyiMWPGaNWqVXrwwQfl6+urQYMGaffu3ZKkGjVquDyuRo0a1rHdu3crODjY5bi3t7eqVKli1TndxIkTNX78+ELla9eulb+/vySpevXqatCggdLS0rRv3z6rTu3atVW7dm1t2rRJmZmZVnn9+vUVHBys1NRU5eTkWOWNGjVSpUqVtHbtWpeL0rx5c/n6+rrMX5ekVq1aKTc3V7/88otVZrfb1bp1a2VmZmrDhg1WuZ+fn1q0aKH9+/dr27ZtVnlQUJAaN26sXbt2aefOnVY5baJNtIk20SbadK42bd++XZKUm5vr0q78NuXm5kqSli9frsDAwDLRpkvxOtEm2kSbaBNt8nybtmzZouLw6PByX19ftWrVSitWrLDKHnzwQa1atUopKSlasWKFOnTooF27dikkJMSqc+utt8pms+mTTz7RhAkT9N5772njxo0u5w4ODtb48eN1//33F3reonq669SpowMHDljDAi7XOzW0iTbRJtpEmy7vNiUnJ6tr165KTk5Wu3btCrXphx9+UMeOHbV06VJ6umkTbaJNtIk2XdZtOnTokKpUqVK6h5eHhISoSZMmLmWNGzfW3LlzJUk1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uC1OAMD5I+kGiqmkWyBJrkPSz2eoOD0S53Y+w/6PHDmilJQUHTp0SOXLl9eIESOKPaKAIf8APIHVmHEp2rFjh9u3CM23bt06tgiFx5B0A8V0vlsglStXzg3RIF9Jh/1/9dVX+t///ien0ynp1BfZMWPGqF27dsXa35Yh/wDOxV2JxIwZM3T48GENHz5chw4dUqNGjfTcc88pICBAa9asueDPJ5FIwH127NihKxs11vGcY257Dh8fHz355JOSpGuvvbbEN+lLorxfBW3csJ7PC4pE0g3gsvHVV19pxYoV8vf3V9euXdWwYUNt2rRJ33zzjVasWCFJxUq8AeBM3J1IFEwiXnjhBXXq1Mktz5OPRALusn//fh3POaaqfeLkU7WOm57F6N/pp/5VdcBkSe4ZqXbywB86kDRN+/fv57OCIpF0AyjTijvsPzc3V88995yCg4O1efNmLV++XLt371aPHj30wQcfKDw8XD/++KMWL1581p7sy3nIvzuHAV7MIYASvXdwn6rXX6/NOcfkVT5A8rK75Tlsk1+SJA31qSC581eS0yFnzhFVvv566fff3fhEuJz5VK2jcjXD3f487vk0AsVD0g2gTCvusP/p06fL4XCob9++atGihdLT061joaGhuuWWWzRz5kz9+9//1qhRo9wXcBm1Y8cONW7cWMeOub/3zt1DACWpQoUKWr++bPfeXTlwoP6Q5PXZONm8yvafc+PMk1NS5YEDy3xy53PggGpL0vEjng7lgsn9ax9wAMD5Kdt/pWFxOBxKTk5WRkaGQkJCFBUVJbude3pAvq1bt0o6NSeyT58++uijj9SsWTOlpqZqwoQJmjVrlks9uNq/f7+OHTumOaOfUuM69S74+Y0xcshIkvpMfcOti9Wt/2O7Bk55vswPA7SSu2OZng7lgrkUkruTVatq7969buvptknyt59ak+Kow+uvT42bOB1yHj+iylWripUscKFx4xCXk7L9DockKTExUXFxcYV67qZNm6aYmBjPBQaUImFhYZKk5s2ba968efLy8pIktWvXTvPmzdNVV12lX375xaqHojWuU09Xhzf0dBhQgeSuQtCl8YX1WOYlkdwdWLTorznd7unp9vHx0ZOP/f+cbnePCinvV0EbFy2Sv1ufBZcjbhziclK2/0pDiYmJio2NLTS8NiMjQ7GxsUpISCDxBiRFRERIOjVM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Vq1axesOtyrqO0lZeM85nU7ZbDZJUmZmpo4dOyan0ykvLy++Z5VBZeE9dzqSbhRL/i8mSZozZ46WL1+ukydPejiqS1N+IvDVV19p8ODBuu666/Twww/r999/L5O/ZHBKwRspKB1sNpvmzp2rmJgY1axZU1lZWZLK5h9zT8t/zQ4ePKgTJ07I4XDIZrPxfnez/Nf9m2++Ub169TR48GCtXLmS9zDcouB3wW+//Vbffvutfv31VyuZLa0Kxj1lyhT17dtXXbt21Q033KA///zTOoayIf978ooVKzRr1iw9+uij+vXXX3Xo0CFPh3ZWvMtwTsYY6xfSE088odGjR2vdunU6duyYhyO7NNlsNn3++efq27evKleurMGDB+ujjz7Sfffdp82bN3s6PJyHgjdSRo0apa5du+rll1/WqlWrPB3aZW3dunUaMWKEXnzxRY0bN06tWrWSJO3Zs8fDkZU9NptN8+fPV7du3dS1a1fdeeedOnLkiLy8vORwODwd3iVp27Zt+vLLL5WdnS2bzaaVK1eqfPnyuvvuu0m84Rb53wUfe+wx3XLLLbrnnnvUrl07/ec///FwZGeXH/eTTz6pKVOm6M4779S//vUvpaamqk+fPjp48KCHI0RJ5N8wv/HGG/XVV19p1apVio6O1sSJE5Wdne3p8M6IpBvnlH8Hc/LkyXrnnXf0xRdfaNiwYQoKCvJwZJemffv26YUXXtD48eP1yiuv6LbbbpOXl5datWqlhg0bejo8nAebzaZ58+bplltuUUBAgNq0aaMFCxbozjvv1I4dOzwd3mUnPxn5/fffVbt2bQ0dOlRHjx7VnDlz1KtXL1111VUaO3ash6MsG/Jfy19++UX9+/dXTEyMrr32Wm3dulVXX321srOzZbfbSbwvsD///FPh4eG69dZbtXTpUh07dkw2m01r166Vn58fPd64oAq+j9avX6+kpCQtXbpU//3vfzVmzBjdfffdev311z0Y4blt375dixcv1pw5czR48GAdOXJER44c0X333acqVapY9RidU/r99ttveuSRRzRt2jQlJCToyy+/VFpamgIDA1WxYkVPh3dmBiiGEydOmH79+pnJkycbY4xJT083CxYsML169TJjxowxycnJHo7w0rFv3z5zzTXXmIMHD5rt27ebWrVqmaFDh1rHv/32W5Obm+vBCFFSu3btMq1atTJvvPGGMcaYgwcPmipVqphHHnnEw5FdXpxOpzHGmKNHjxpjjElOTjbBwcHmn//8p4mMjDQ33XSTue+++8zMmTONzWbj99pZ5L+WxhizatUq8+WXX5oJEyYYY4xxOBxm7dq1plWrVqZBgwYmKyvLGGNMXl6eR2K9FB09etQ0a9bMBAQEmEqVKpmPPvrIHDt2zDp+1VVXmSuvvNKkpKS4XCvg75g4caJ57LHHzOjRo60yp9NppkyZYmw2m3n99dc9GN3ZrVmzxtSoUcMYY8wXX3xhAgICzIwZM4wxxmRnZ5vXX3+d31FlxPfff2/atWtnjDFm/fr1pm7duubee++1jm/evNmcPHnSU+GdET3dOCdjjJxOpzZv3qzly5fr448/toZk2u12JSUl6YMPPpDD4eCu+t+Qf3fVZrPp0KFD+vDDD9WtWzf16dNH06dPl3RqOOGkSZOUnJzsyVBxDsYYl8+CMUaZmZm6+eablZ6erubNm6tv376aNm2aJOmrr77S7t27PRXuZcH8NcT/66+/1rPPPqtNmzapRYsWGjt2rNavX682bdpo/PjxmjFjhu644w61a9dOdrvd02GXOo888ogWLFhgjYA6cOCA7rnnHvXu3dsaounl5aUWLVrorbfeUuXKldWmTRtlZWXxel4gDodDFSpU0G233aaHHnpI99xzj+666y59/vnn1ir8a9asUYUKFTR06FD98MMP/G3G33bixAmlp6drypQp2rhxo1Vus9kUFxenKVOm6OGHH9akSZM8GOUpRb3fr7zySrVo0UKPPvqobrvtNr344osaNmyYpFO94PPnz9eKFSsudqg4D7t371ZeXp4OHz6s66+/Xj179tTMmTMlSV9//bXeeOON0jllwHP5Pkorh8Ph8vOJEyeMMcasXLnS/OMf/zAhISFm3Lhx5ocffjDGGPPMM8+Y3r17czf9POS/ZikpKeaDDz4w+/btM8YY8+STT5qAgABz3XXXudQfM2aMadmypfnjjz8ueqwoufnz55uEhASzfv160759e7N06VITFhZm7r33Xutztn79enPvvfea5cuXezjaS19CQoLx9/c3zz33nFmzZo1Vnv87Lt9TTz1l6tevb/7888+LHWKpdvz4cfP444+btWvXupR9/vnnpm3btqZZs2aF/g78/PPPJjw83Fx99dXG6XTyd+ICWrp0qalUqZJJTU0148aNM+XKlSvU4x0WFmZat25tcnJyPBgpyqKiPqt79+418fHxxm63m7lz57rUczqdZty4cebaa6/16Oe84HfYiRMnmvnz5xtjTvVmDxw40JQrV8488MADVp1jx46ZG264wfTu3bvQ9194XlHvpezsbNOwYUNjs9nM/fff73Ls0UcfNd27dzcHDhy4WCEWG0k3XBT8hfP666+bIUOGmKioKDNr1iyTnZ1tjh49anbt2mXVycvLMz179jTDhg3zRLhlWv4vkoSEBFO5cmXz/PPPm/Xr1xtjjPnpp59MdHS0adKkiXn11VfNe++9Z4YPH24CAwPNunXrPBk2ziH/uq5bt87YbDbz/vvvG2OMuemmm4zNZjODBw92qf/444+bq6++2uVzhQtv1apVJjg42Pz73/92Kc/IyLD+vXjxYnPPPfeYatWquSTlOJVcG/P/7+8vv/zSJCQkWMcWLVpkrrzyShMVFVVoiOavv/5qtm3bdnEDvsRs3rzZLFiwwGzatMml/IEHHjDDhw83xhgzcuRIU758efPRRx+5JNm89iipgt8F9+/fb7Zv3279nJuba0aOHGm8vb3NvHnzjDGuiVHBJPxiKxj3pk2bTPfu3Y2vr6/5+uuvjTHG7Nixw7Rv3960bdvWDB061LzwwgumY8eOJiIiwpq2R+JdeuS/h1auXGlef/11s3TpUqtzas6cOaZhw4bmzjvvNJmZmWb16tXmiSeeMEFBQebXX3/1ZNhnRNKNIj322GOmVq1aZsyYMWbSpEnGZrOZESNGWHPzsrKyzPz5802fPn1Ms2bNrF9W9GKUzLfffmuCgoLMrFmzCr12GzduNHFxcSY4ONhcc801pk+fPuaXX37xUKQoiZ9++sksXLjQPPPMM1bZvn37TJcuXUyDBg3MZ599Zv7zn/+YBx54wFSsWNH8/PPPHoz28jB79mzTunVrY8ypno1PPvnE9O7d24SHh5vnn3/eGHPqRuOgQYPMb7/95slQS52XX37ZdOzY0Rw8eNAYc+pL6YMPPmhsNptJTEw0xpwaLbBw4ULTrFkz07FjR764XkA7d+40NpvN2O120759e/Pkk0+arVu3GofDYRYtWmSuueYac/jwYWOMMSNGjDAVK1Y0s2fPpncb56Xgd5Fx48aZVq1amcqVK5suXbqYmTNnmhMnThiHw2EeeOAB4+PjYz7//POznsMTnnjiCdO+fXvTp08fU7lyZVOuXDmTlJRkjDEmLS3NPPXUU+baa6810dHR5qGHHrLm/5bGecCXu/nz55vy5cubli1bGh8fHzN06FCzbt06c/LkSfPWW2+Z0NBQU6lSJdO4cWNz1VVXuYzEKm1IulFIcnKyCQsLMz/++KMx5tTiEwV77IwxJjU11fTt29fcfPPNVsLNL6uSGz16tOnbt68x5tRwme+++84MGTLE3H777VaP9qFDh8zJkyddhgyi9MrMzDT169c3NpvNDBo0yOXYzp07zS233GIaN25smjRpYnr37k3CfZEkJSWZsLAwM2rUKNOxY0dz4403moEDB5pp06YZm81m1q5da44cOWKOHDni6VBLnVWrVpnKlSubW265xUq8MzMzTVxcnMsw0/zEu2XLlqZ58+Yk3hdQu3btjLe3t3nyySdNRESEufHGG82AAQPM7t27TfPmzU1cXJxV95577jE1a9a0bpID5+O5554zVatWNbNnzzZffPGFiYmJMe3atTPjxo0zubm5Jicnxzz88MPGZrOZ77//3tPhWv7zn/+YChUqmJSUFJOVlWV++eUXM2jQIOPj42Ml3g6Ho9CNARZRK10cDoc5efKkueuuu8ysWbOMMadGhrZq1crceuut1nfknJwcs3DhQrN+/Xqzd+9eT4Z8TiTdl7lRo0aZ9PR0l7LFixebTp06GWOM+fjjj01AQICZPn26MebUF62ffvrJGHNqBfP8L1Uk3Odn/Pjxpn379uaDDz4w/fr1MzfccIO1inLt2rVd5pR6+s4xzuz0a5OSkmLat29vGjdubCUpBevs3LnTHD58mATPTfJf66ysLJOdnW1yc3PNkSNHzLPPPmsiIyPNyJEjrZuKf/75p2nTpg3Dyc9h3bp1Jjg42Nx4443m0KFDxphTr++oUaMKJd6ff/65ad++faG/LSgZp9Ppst5A27ZtTZs2bczixYvNokWLTP/+/U2LFi1MrVq1zFVXXWUNuzTGmN27d3siZJRRBT+rTqfT7N2717Rt29a88847VvmxY8fME088Ya666iqzdOlSY4wxBw4cMK+88kqp+g44fvx407NnT5eyjIwMExsba8qXL2++/fZbYwzDyEur/L/fu3fvNseOHTMPPvigS+/1/PnzTevWrc1tt91W5tbCIem+jGVkZJiOHTsW+mWZlJRkwsPDzezZs01Q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"},"metadata":{}}]},{"cell_type":"markdown","source":"## Insulin have lot of outlier so I have to delete the Outlier ---->>>\n","metadata":{}},{"cell_type":"markdown","source":"Various way to drop the outlier \nWe can use the z score for dropping the Outlier ->\n\nI m using the visulaisation and found 600 is BenchMark for insulin--->>\n\n","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"# Assuming 'df' is your DataFrame and 'insulin' is the column containing insulin values\n# Filter the DataFrame to select rows where insulin value is greater than 600\noutlier_rows = df[df['Insulin'] > 350]\n\n# Drop the outlier rows from the original DataFrame\ncleaned_df = df.drop(outlier_rows.index)\n\n# Now 'cleaned_df' contains the dataset with rows where insulin value is greater than 600 removed\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:09:32.725208Z","iopub.execute_input":"2024-05-01T16:09:32.725865Z","iopub.status.idle":"2024-05-01T16:09:32.738100Z","shell.execute_reply.started":"2024-05-01T16:09:32.725812Z","shell.execute_reply":"2024-05-01T16:09:32.736753Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"display(cleaned_df)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:09:34.617447Z","iopub.execute_input":"2024-05-01T16:09:34.617831Z","iopub.status.idle":"2024-05-01T16:09:34.635788Z","shell.execute_reply.started":"2024-05-01T16:09:34.617802Z","shell.execute_reply":"2024-05-01T16:09:34.634469Z"},"trusted":true},"execution_count":41,"outputs":[{"output_type":"display_data","data":{"text/plain":"     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0              6      148             72             35        0  33.6   \n1              1       85             66             29        0  26.6   \n2              8      183             64              0        0  23.3   \n3              1       89             66             23       94  28.1   \n4              0      137             40             35      168  43.1   \n..           ...      ...            ...            ...      ...   ...   \n763           10      101             76             48      180  32.9   \n764            2      122             70             27        0  36.8   \n765            5      121             72             23      112  26.2   \n766            1      126             60              0        0  30.1   \n767            1       93             70             31        0  30.4   \n\n     DiabetesPedigreeFunction  Age  Outcome  \n0                       0.627   50        1  \n1                       0.351   31        0  \n2                       0.672   32        1  \n3                       0.167   21        0  \n4                       2.288   33        1  \n..                        ...  ...      ...  \n763                     0.171   63        0  \n764                     0.340   27        0  \n765                     0.245   30        0  \n766                     0.349   47        1  \n767                     0.315   23        0  \n\n[743 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>10</td>\n      <td>101</td>\n      <td>76</td>\n      <td>48</td>\n      <td>180</td>\n      <td>32.9</td>\n      <td>0.171</td>\n      <td>63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>764</th>\n      <td>2</td>\n      <td>122</td>\n      <td>70</td>\n      <td>27</td>\n      <td>0</td>\n      <td>36.8</td>\n      <td>0.340</td>\n      <td>27</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>5</td>\n      <td>121</td>\n      <td>72</td>\n      <td>23</td>\n      <td>112</td>\n      <td>26.2</td>\n      <td>0.245</td>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>766</th>\n      <td>1</td>\n      <td>126</td>\n      <td>60</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.1</td>\n      <td>0.349</td>\n      <td>47</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>767</th>\n      <td>1</td>\n      <td>93</td>\n      <td>70</td>\n      <td>31</td>\n      <td>0</td>\n      <td>30.4</td>\n      <td>0.315</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>743 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))  # Adjust the figure size\nbox = plt.boxplot(cleaned_df,\n                  vert=True,\n                  patch_artist=True,\n                  labels=labels,\n                  medianprops=dict(color='orange'))  ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:09:37.797099Z","iopub.execute_input":"2024-05-01T16:09:37.798321Z","iopub.status.idle":"2024-05-01T16:09:38.138734Z","shell.execute_reply.started":"2024-05-01T16:09:37.798268Z","shell.execute_reply":"2024-05-01T16:09:38.137274Z"},"trusted":true},"execution_count":42,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\n\n# Assuming 'df' is your DataFrame containing the dataset\n\n# Calculate Z-score for each column\nz_scores = np.abs((df - df.mean()) / df.std())\n\n# Define a threshold for outliers (e.g., Z-score > 3)\nthreshold = 3\n\n# Find outliers\noutliers = np.where(z_scores > threshold)\n\n# Remove outliers\ncleaned_df_with_Zscore = df.drop(outliers[0])\n\n# Print the indices of removed outliers\nprint(\"Indices of removed outliers:\")\nfor col, idx in zip(df.columns[outliers[1]], outliers[0]):\n    print(f\"Column '{col}', Index {idx}\")\n\n# Now 'cleaned_df' contains the dataset with outliers removed\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:17:21.368533Z","iopub.execute_input":"2024-05-01T16:17:21.369116Z","iopub.status.idle":"2024-05-01T16:17:21.387084Z","shell.execute_reply.started":"2024-05-01T16:17:21.369069Z","shell.execute_reply":"2024-05-01T16:17:21.386108Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Indices of removed outliers:\nColumn 'DiabetesPedigreeFunction', Index 4\nColumn 'BloodPressure', Index 7\nColumn 'Insulin', Index 8\nColumn 'BMI', Index 9\nColumn 'Insulin', Index 13\nColumn 'BloodPressure', Index 15\nColumn 'DiabetesPedigreeFunction', Index 45\nColumn 'BloodPressure', Index 49\nColumn 'BMI', Index 49\nColumn 'DiabetesPedigreeFunction', Index 58\nColumn 'BloodPressure', Index 60\nColumn 'BMI', Index 60\nColumn 'Glucose', Index 75\nColumn 'BloodPressure', Index 78\nColumn 'BloodPressure', Index 81\nColumn 'BMI', Index 81\nColumn 'Pregnancies', Index 88\nColumn 'Insulin', Index 111\nColumn 'Age', Index 123\nColumn 'BMI', Index 145\nColumn 'Insulin', Index 153\nColumn 'Pregnancies', Index 159\nColumn 'BloodPressure', Index 172\nColumn 'BMI', Index 177\nColumn 'Glucose', Index 182\nColumn 'Insulin', Index 186\nColumn 'BloodPressure', Index 193\nColumn 'Insulin', Index 220\nColumn 'BloodPressure', Index 222\nColumn 'Insulin', Index 228\nColumn 'DiabetesPedigreeFunction', Index 228\nColumn 'Insulin', Index 247\nColumn 'BloodPressure', Index 261\nColumn 'BloodPressure', Index 266\nColumn 'BloodPressure', Index 269\nColumn 'Insulin', Index 286\nColumn 'Pregnancies', Index 298\nColumn 'BloodPressure', Index 300\nColumn 'DiabetesPedigreeFunction', Index 330\nColumn 'BloodPressure', Index 332\nColumn 'BloodPressure', Index 336\nColumn 'Glucose', Index 342\nColumn 'BloodPressure', Index 347\nColumn 'Glucose', Index 349\nColumn 'BloodPressure', Index 357\nColumn 'Insulin', Index 370\nColumn 'DiabetesPedigreeFunction', Index 370\nColumn 'BMI', Index 371\nColumn 'DiabetesPedigreeFunction', Index 371\nColumn 'DiabetesPedigreeFunction', Index 395\nColumn 'Insulin', Index 409\nColumn 'Insulin', Index 415\nColumn 'BloodPressure', Index 426\nColumn 'BMI', Index 426\nColumn 'BloodPressure', Index 430\nColumn 'BloodPressure', Index 435\nColumn 'BMI', Index 445\nColumn 'DiabetesPedigreeFunction', Index 445\nColumn 'BloodPressure', Index 453\nColumn 'Age', Index 453\nColumn 'Pregnancies', Index 455\nColumn 'Age', Index 459\nColumn 'BloodPressure', Index 468\nColumn 'BloodPressure', Index 484\nColumn 'Insulin', Index 486\nColumn 'BloodPressure', Index 494\nColumn 'BMI', Index 494\nColumn 'Glucose', Index 502\nColumn 'BloodPressure', Index 522\nColumn 'BMI', Index 522\nColumn 'BloodPressure', Index 533\nColumn 'BloodPressure', Index 535\nColumn 'SkinThickness', Index 579\nColumn 'Insulin', Index 584\nColumn 'BloodPressure', Index 589\nColumn 'DiabetesPedigreeFunction', Index 593\nColumn 'BloodPressure', Index 601\nColumn 'BloodPressure', Index 604\nColumn 'BloodPressure', Index 619\nColumn 'DiabetesPedigreeFunction', Index 621\nColumn 'BloodPressure', Index 643\nColumn 'Insulin', Index 645\nColumn 'Insulin', Index 655\nColumn 'Age', Index 666\nColumn 'BMI', Index 673\nColumn 'BMI', Index 684\nColumn 'Age', Index 684\nColumn 'Insulin', Index 695\nColumn 'BloodPressure', Index 697\nColumn 'BloodPressure', Index 703\nColumn 'BloodPressure', Index 706\nColumn 'BMI', Index 706\nColumn 'Insulin', Index 753\n","output_type":"stream"}]},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))  # Adjust the figure size\nbox = plt.boxplot(cleaned_df_with_Zscore,\n                  vert=True,\n                  patch_artist=True,\n                  labels=labels,\n                  medianprops=dict(color='orange'))  ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:17:49.402726Z","iopub.execute_input":"2024-05-01T16:17:49.403152Z","iopub.status.idle":"2024-05-01T16:17:49.759836Z","shell.execute_reply.started":"2024-05-01T16:17:49.403115Z","shell.execute_reply":"2024-05-01T16:17:49.758562Z"},"trusted":true},"execution_count":44,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"cleaned_df_with_Zscore.count()","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:19:47.106803Z","iopub.execute_input":"2024-05-01T16:19:47.107218Z","iopub.status.idle":"2024-05-01T16:19:47.118593Z","shell.execute_reply.started":"2024-05-01T16:19:47.107183Z","shell.execute_reply":"2024-05-01T16:19:47.117386Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"Pregnancies                 688\nGlucose                     688\nBloodPressure               688\nSkinThickness               688\nInsulin                     688\nBMI                         688\nDiabetesPedigreeFunction    688\nAge                         688\nOutcome                     688\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"display(cleaned_df_with_Zscore)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:20:10.253352Z","iopub.execute_input":"2024-05-01T16:20:10.253763Z","iopub.status.idle":"2024-05-01T16:20:10.273306Z","shell.execute_reply.started":"2024-05-01T16:20:10.253731Z","shell.execute_reply":"2024-05-01T16:20:10.272273Z"},"trusted":true},"execution_count":47,"outputs":[{"output_type":"display_data","data":{"text/plain":"     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0              6      148             72             35        0  33.6   \n1              1       85             66             29        0  26.6   \n2              8      183             64              0        0  23.3   \n3              1       89             66             23       94  28.1   \n5              5      116             74              0        0  25.6   \n..           ...      ...            ...            ...      ...   ...   \n763           10      101             76             48      180  32.9   \n764            2      122             70             27        0  36.8   \n765            5      121             72             23      112  26.2   \n766            1      126             60              0        0  30.1   \n767            1       93             70             31        0  30.4   \n\n     DiabetesPedigreeFunction  Age  Outcome  \n0                       0.627   50        1  \n1                       0.351   31        0  \n2                       0.672   32        1  \n3                       0.167   21        0  \n5                       0.201   30        0  \n..                        ...  ...      ...  \n763                     0.171   63        0  \n764                     0.340   27        0  \n765                     0.245   30        0  \n766                     0.349   47        1  \n767                     0.315   23        0  \n\n[688 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>116</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0</td>\n      <td>25.6</td>\n      <td>0.201</td>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>10</td>\n      <td>101</td>\n      <td>76</td>\n      <td>48</td>\n      <td>180</td>\n      <td>32.9</td>\n      <td>0.171</td>\n      <td>63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>764</th>\n      <td>2</td>\n      <td>122</td>\n      <td>70</td>\n      <td>27</td>\n      <td>0</td>\n      <td>36.8</td>\n      <td>0.340</td>\n      <td>27</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>5</td>\n      <td>121</td>\n      <td>72</td>\n      <td>23</td>\n      <td>112</td>\n      <td>26.2</td>\n      <td>0.245</td>\n      <td>30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>766</th>\n      <td>1</td>\n      <td>126</td>\n      <td>60</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.1</td>\n      <td>0.349</td>\n      <td>47</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>767</th>\n      <td>1</td>\n      <td>93</td>\n      <td>70</td>\n      <td>31</td>\n      <td>0</td>\n      <td>30.4</td>\n      <td>0.315</td>\n      <td>23</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>688 rows × 9 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\nX = cleaned_df_with_Zscore.iloc[:, 0:8] ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:43:05.702587Z","iopub.execute_input":"2024-05-01T16:43:05.703001Z","iopub.status.idle":"2024-05-01T16:43:05.709530Z","shell.execute_reply.started":"2024-05-01T16:43:05.702971Z","shell.execute_reply":"2024-05-01T16:43:05.708280Z"},"trusted":true},"execution_count":92,"outputs":[]},{"cell_type":"code","source":"display(X)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:43:09.777521Z","iopub.execute_input":"2024-05-01T16:43:09.778344Z","iopub.status.idle":"2024-05-01T16:43:09.798545Z","shell.execute_reply.started":"2024-05-01T16:43:09.778291Z","shell.execute_reply":"2024-05-01T16:43:09.797133Z"},"trusted":true},"execution_count":93,"outputs":[{"output_type":"display_data","data":{"text/plain":"     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n0              6      148             72             35        0  33.6   \n1              1       85             66             29        0  26.6   \n2              8      183             64              0        0  23.3   \n3              1       89             66             23       94  28.1   \n5              5      116             74              0        0  25.6   \n..           ...      ...            ...            ...      ...   ...   \n763           10      101             76             48      180  32.9   \n764            2      122             70             27        0  36.8   \n765            5      121             72             23      112  26.2   \n766            1      126             60              0        0  30.1   \n767            1       93             70             31        0  30.4   \n\n     DiabetesPedigreeFunction  Age  \n0                       0.627   50  \n1                       0.351   31  \n2                       0.672   32  \n3                       0.167   21  \n5                       0.201   30  \n..                        ...  ...  \n763                     0.171   63  \n764                     0.340   27  \n765                     0.245   30  \n766                     0.349   47  \n767                     0.315   23  \n\n[688 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pregnancies</th>\n      <th>Glucose</th>\n      <th>BloodPressure</th>\n      <th>SkinThickness</th>\n      <th>Insulin</th>\n      <th>BMI</th>\n      <th>DiabetesPedigreeFunction</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>116</td>\n      <td>74</td>\n      <td>0</td>\n      <td>0</td>\n      <td>25.6</td>\n      <td>0.201</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>763</th>\n      <td>10</td>\n      <td>101</td>\n      <td>76</td>\n      <td>48</td>\n      <td>180</td>\n      <td>32.9</td>\n      <td>0.171</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>764</th>\n      <td>2</td>\n      <td>122</td>\n      <td>70</td>\n      <td>27</td>\n      <td>0</td>\n      <td>36.8</td>\n      <td>0.340</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>765</th>\n      <td>5</td>\n      <td>121</td>\n      <td>72</td>\n      <td>23</td>\n      <td>112</td>\n      <td>26.2</td>\n      <td>0.245</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>766</th>\n      <td>1</td>\n      <td>126</td>\n      <td>60</td>\n      <td>0</td>\n      <td>0</td>\n      <td>30.1</td>\n      <td>0.349</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>767</th>\n      <td>1</td>\n      <td>93</td>\n      <td>70</td>\n      <td>31</td>\n      <td>0</td>\n      <td>30.4</td>\n      <td>0.315</td>\n      <td>23</td>\n    </tr>\n  </tbody>\n</table>\n<p>688 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:39:48.098703Z","iopub.execute_input":"2024-05-01T16:39:48.099104Z","iopub.status.idle":"2024-05-01T16:39:48.105860Z","shell.execute_reply.started":"2024-05-01T16:39:48.099072Z","shell.execute_reply":"2024-05-01T16:39:48.104082Z"},"trusted":true},"execution_count":77,"outputs":[]},{"cell_type":"code","source":"scaler = StandardScaler()\n\n# Fit the scaler to the features and transform the features\nX = scaler.fit_transform(X)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:18.368243Z","iopub.execute_input":"2024-05-01T16:49:18.368690Z","iopub.status.idle":"2024-05-01T16:49:18.381629Z","shell.execute_reply.started":"2024-05-01T16:49:18.368659Z","shell.execute_reply":"2024-05-01T16:49:18.380262Z"},"trusted":true},"execution_count":110,"outputs":[]},{"cell_type":"code","source":"Y = cleaned_df_with_Zscore.iloc[:, 8]","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:22.247021Z","iopub.execute_input":"2024-05-01T16:49:22.247442Z","iopub.status.idle":"2024-05-01T16:49:22.254472Z","shell.execute_reply.started":"2024-05-01T16:49:22.247408Z","shell.execute_reply":"2024-05-01T16:49:22.253202Z"},"trusted":true},"execution_count":111,"outputs":[]},{"cell_type":"code","source":"display(Y)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:24.707905Z","iopub.execute_input":"2024-05-01T16:49:24.708530Z","iopub.status.idle":"2024-05-01T16:49:24.717777Z","shell.execute_reply.started":"2024-05-01T16:49:24.708481Z","shell.execute_reply":"2024-05-01T16:49:24.716286Z"},"trusted":true},"execution_count":112,"outputs":[{"output_type":"display_data","data":{"text/plain":"0      1\n1      0\n2      1\n3      0\n5      0\n      ..\n763    0\n764    0\n765    0\n766    1\n767    0\nName: Outcome, Length: 688, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:27.652395Z","iopub.execute_input":"2024-05-01T16:49:27.652857Z","iopub.status.idle":"2024-05-01T16:49:27.658799Z","shell.execute_reply.started":"2024-05-01T16:49:27.652818Z","shell.execute_reply":"2024-05-01T16:49:27.657236Z"},"trusted":true},"execution_count":113,"outputs":[]},{"cell_type":"code","source":"X_train, X_test,\\\n    y_train, y_test = train_test_split(X, Y,\n                                       test_size=0.20,\n                                       random_state=23)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:30.954338Z","iopub.execute_input":"2024-05-01T16:49:30.954749Z","iopub.status.idle":"2024-05-01T16:49:30.963398Z","shell.execute_reply.started":"2024-05-01T16:49:30.954715Z","shell.execute_reply":"2024-05-01T16:49:30.962202Z"},"trusted":true},"execution_count":114,"outputs":[]},{"cell_type":"code","source":"display(X_train)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:33.858736Z","iopub.execute_input":"2024-05-01T16:49:33.859124Z","iopub.status.idle":"2024-05-01T16:49:33.868588Z","shell.execute_reply.started":"2024-05-01T16:49:33.859094Z","shell.execute_reply":"2024-05-01T16:49:33.867209Z"},"trusted":true},"execution_count":115,"outputs":[{"output_type":"display_data","data":{"text/plain":"array([[ 0.96252454, -0.20989894, -0.67831541, ..., -0.72710914,\n         0.97581796,  0.07923256],\n       [ 0.65735547, -1.11037993,  0.62208446, ..., -1.36211823,\n        -1.30330247, -0.09576584],\n       [ 0.04701733,  0.05691024, -0.35321544, ...,  0.42195492,\n        -0.21298251, -0.35826346],\n       ...,\n       [ 0.04701733,  2.29143714,  3.0603342 , ..., -0.56079724,\n         0.79292558,  0.34173018],\n       [-0.56332082, -1.64399829, -0.19066546, ..., -0.63639356,\n         0.46231243, -0.97075789],\n       [ 0.65735547, -0.7435173 , -1.16596536, ...,  0.27076228,\n        -0.08636471,  0.8667254 ]])"},"metadata":{}}]},{"cell_type":"code","source":"display(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:37.267261Z","iopub.execute_input":"2024-05-01T16:49:37.267700Z","iopub.status.idle":"2024-05-01T16:49:37.276399Z","shell.execute_reply.started":"2024-05-01T16:49:37.267663Z","shell.execute_reply":"2024-05-01T16:49:37.275109Z"},"trusted":true},"execution_count":116,"outputs":[{"output_type":"display_data","data":{"text/plain":"array([[ 1.26769361, -1.21043337,  0.13443451, ...,  0.92089064,\n         0.00859864,  0.51672859],\n       [ 0.04701733, -0.57676156, -1.00341538, ..., -1.24116412,\n         1.79883367, -0.00826664],\n       [-0.56332082, -0.67681501, -0.35321544, ...,  0.95112916,\n        -0.45918379, -0.62076107],\n       ...,\n       [ 0.04701733, -0.71016615, -0.35321544, ...,  0.08933112,\n        -1.08875564, -0.00826664],\n       [ 0.3521864 , -0.14319664,  0.13443451, ...,  0.0137348 ,\n         0.72258235,  0.16673177],\n       [-0.86848989, -0.44335697, -1.81616529, ..., -0.59103576,\n        -0.96213784, -0.35826346]])"},"metadata":{}}]},{"cell_type":"code","source":"display(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:40.262425Z","iopub.execute_input":"2024-05-01T16:49:40.262877Z","iopub.status.idle":"2024-05-01T16:49:40.274395Z","shell.execute_reply.started":"2024-05-01T16:49:40.262843Z","shell.execute_reply":"2024-05-01T16:49:40.272630Z"},"trusted":true},"execution_count":117,"outputs":[{"output_type":"display_data","data":{"text/plain":"133    0\n35     0\n87     0\n32     0\n375    1\n      ..\n644    0\n22     1\n492    0\n386    1\n687    0\nName: Outcome, Length: 138, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"mlflow.sklearn.autolog()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:43.232354Z","iopub.execute_input":"2024-05-01T16:49:43.232745Z","iopub.status.idle":"2024-05-01T16:49:43.315681Z","shell.execute_reply.started":"2024-05-01T16:49:43.232716Z","shell.execute_reply":"2024-05-01T16:49:43.314497Z"},"trusted":true},"execution_count":118,"outputs":[]},{"cell_type":"code","source":"with mlflow.start_run():\n    lr= LogisticRegression()\n    lr.fit(X_train,y_train)\n    y_pred = lr.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    display(accuracy)\n    mlflow.sklearn.log_model(lr, \"logistic_regression_model\")","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:49:46.321450Z","iopub.execute_input":"2024-05-01T16:49:46.321855Z","iopub.status.idle":"2024-05-01T16:49:53.432851Z","shell.execute_reply.started":"2024-05-01T16:49:46.321825Z","shell.execute_reply":"2024-05-01T16:49:53.431548Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stderr","text":"2024/05/01 16:49:46 WARNING mlflow.sklearn: Failed to log training dataset information to MLflow Tracking. Reason: 'Series' object has no attribute 'flatten'\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"0.7753623188405797"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n# Assuming 'y_test' and 'y_pred' are NumPy arrays or pandas Series\n\n# Create a DataFrame to display both columns\nresult_df = pd.DataFrame({'True Label (y_test)': y_test, 'Predicted Label (y_pred)': y_pred})\n\n# Display the DataFrame\ndisplay(result_df)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:51:22.262265Z","iopub.execute_input":"2024-05-01T16:51:22.262665Z","iopub.status.idle":"2024-05-01T16:51:22.279810Z","shell.execute_reply.started":"2024-05-01T16:51:22.262636Z","shell.execute_reply":"2024-05-01T16:51:22.278270Z"},"trusted":true},"execution_count":122,"outputs":[{"output_type":"display_data","data":{"text/plain":"     True Label (y_test)  Predicted Label (y_pred)\n133                    0                         0\n35                     0                         0\n87                     0                         0\n32                     0                         0\n375                    1                         1\n..                   ...                       ...\n644                    0                         0\n22                     1                         1\n492                    0                         0\n386                    1                         0\n687                    0                         0\n\n[138 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>True Label (y_test)</th>\n      <th>Predicted Label (y_pred)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>133</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>375</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>644</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>492</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>386</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>687</th>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>138 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:43:38.679221Z","iopub.execute_input":"2024-05-01T16:43:38.679622Z","iopub.status.idle":"2024-05-01T16:43:38.688198Z","shell.execute_reply.started":"2024-05-01T16:43:38.679592Z","shell.execute_reply":"2024-05-01T16:43:38.686234Z"},"trusted":true},"execution_count":100,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:43:41.684700Z","iopub.execute_input":"2024-05-01T16:43:41.685599Z","iopub.status.idle":"2024-05-01T16:43:41.695877Z","shell.execute_reply.started":"2024-05-01T16:43:41.685530Z","shell.execute_reply":"2024-05-01T16:43:41.694698Z"},"trusted":true},"execution_count":101,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:43:43.672502Z","iopub.execute_input":"2024-05-01T16:43:43.672927Z","iopub.status.idle":"2024-05-01T16:43:43.679152Z","shell.execute_reply.started":"2024-05-01T16:43:43.672893Z","shell.execute_reply":"2024-05-01T16:43:43.678279Z"},"trusted":true},"execution_count":102,"outputs":[{"output_type":"display_data","data":{"text/plain":"0.7681159420289855"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:44:30.592869Z","iopub.execute_input":"2024-05-01T16:44:30.593338Z","iopub.status.idle":"2024-05-01T16:44:49.895766Z","shell.execute_reply.started":"2024-05-01T16:44:30.593304Z","shell.execute_reply":"2024-05-01T16:44:49.894242Z"},"trusted":true},"execution_count":103,"outputs":[{"name":"stdout","text":"Collecting mlflow\n  Downloading mlflow-2.12.1-py3-none-any.whl.metadata (29 kB)\nRequirement already satisfied: Flask<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.0.3)\nRequirement already satisfied: alembic!=1.10.0,<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.13.1)\nRequirement already satisfied: click<9,>=7.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (8.1.7)\nRequirement already satisfied: cloudpickle<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.2.1)\nRequirement already satisfied: docker<8,>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (7.0.0)\nRequirement already satisfied: entrypoints<1 in /opt/conda/lib/python3.10/site-packages (from mlflow) (0.4)\nRequirement already satisfied: gitpython<4,>=3.1.9 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.1.41)\nCollecting graphene<4 (from mlflow)\n  Downloading graphene-3.3-py2.py3-none-any.whl.metadata (7.7 kB)\nRequirement already satisfied: importlib-metadata!=4.7.0,<8,>=3.7.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (6.11.0)\nRequirement already satisfied: markdown<4,>=3.3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.5.2)\nRequirement already satisfied: matplotlib<4 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.7.5)\nRequirement already satisfied: numpy<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.26.4)\nRequirement already satisfied: packaging<25 in /opt/conda/lib/python3.10/site-packages (from mlflow) (21.3)\nRequirement already satisfied: pandas<3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.2.2)\nRequirement already satisfied: protobuf<6,>=3.12.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.20.3)\nRequirement already satisfied: pyarrow<16,>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (15.0.2)\nRequirement already satisfied: pytz<2025 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2023.3.post1)\nRequirement already satisfied: pyyaml<7,>=5.1 in /opt/conda/lib/python3.10/site-packages (from mlflow) (6.0.1)\nCollecting querystring-parser<2 (from mlflow)\n  Downloading querystring_parser-1.2.4-py2.py3-none-any.whl.metadata (559 bytes)\nRequirement already satisfied: requests<3,>=2.17.3 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.31.0)\nRequirement already satisfied: scikit-learn<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.2.2)\nRequirement already satisfied: scipy<2 in /opt/conda/lib/python3.10/site-packages (from mlflow) (1.11.4)\nRequirement already satisfied: sqlalchemy<3,>=1.4.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (2.0.25)\nRequirement already satisfied: sqlparse<1,>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from mlflow) (0.4.4)\nRequirement already satisfied: Jinja2<4,>=2.11 in /opt/conda/lib/python3.10/site-packages (from mlflow) (3.1.2)\nCollecting gunicorn<22 (from mlflow)\n  Downloading gunicorn-21.2.0-py3-none-any.whl.metadata (4.1 kB)\nRequirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow) (1.3.3)\nRequirement already satisfied: typing-extensions>=4 in /opt/conda/lib/python3.10/site-packages (from alembic!=1.10.0,<2->mlflow) (4.9.0)\nRequirement already satisfied: urllib3>=1.26.0 in /opt/conda/lib/python3.10/site-packages (from docker<8,>=4.0.0->mlflow) (1.26.18)\nRequirement already satisfied: Werkzeug>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (3.0.2)\nRequirement already satisfied: itsdangerous>=2.1.2 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (2.2.0)\nRequirement already satisfied: blinker>=1.6.2 in /opt/conda/lib/python3.10/site-packages (from Flask<4->mlflow) (1.7.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.10/site-packages (from gitpython<4,>=3.1.9->mlflow) (4.0.11)\nCollecting graphql-core<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_core-3.2.3-py3-none-any.whl.metadata (10 kB)\nCollecting graphql-relay<3.3,>=3.1 (from graphene<4->mlflow)\n  Downloading graphql_relay-3.2.0-py3-none-any.whl.metadata (12 kB)\nCollecting aniso8601<10,>=8 (from graphene<4->mlflow)\n  Downloading aniso8601-9.0.1-py2.py3-none-any.whl.metadata (23 kB)\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata!=4.7.0,<8,>=3.7.0->mlflow) (3.17.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from Jinja2<4,>=2.11->mlflow) (2.1.3)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (1.2.0)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (4.47.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (1.4.5)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (9.5.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (3.1.1)\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib<4->mlflow) (2.9.0.post0)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas<3->mlflow) (2023.4)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from querystring-parser<2->mlflow) (1.16.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (3.6)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.17.3->mlflow) (2024.2.2)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn<2->mlflow) (1.4.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn<2->mlflow) (3.2.0)\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy<3,>=1.4.0->mlflow) (3.0.3)\nRequirement already satisfied: smmap<6,>=3.0.1 in /opt/conda/lib/python3.10/site-packages (from gitdb<5,>=4.0.1->gitpython<4,>=3.1.9->mlflow) (5.0.1)\nDownloading mlflow-2.12.1-py3-none-any.whl (20.2 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20.2/20.2 MB\u001b[0m \u001b[31m54.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading graphene-3.3-py2.py3-none-any.whl (128 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m128.2/128.2 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading gunicorn-21.2.0-py3-none-any.whl (80 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.2/80.2 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading querystring_parser-1.2.4-py2.py3-none-any.whl (7.9 kB)\nDownloading aniso8601-9.0.1-py2.py3-none-any.whl (52 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.8/52.8 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_core-3.2.3-py3-none-any.whl (202 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m202.9/202.9 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading graphql_relay-3.2.0-py3-none-any.whl (16 kB)\nInstalling collected packages: aniso8601, querystring-parser, graphql-core, gunicorn, graphql-relay, graphene, mlflow\nSuccessfully installed aniso8601-9.0.1 graphene-3.3 graphql-core-3.2.3 graphql-relay-3.2.0 gunicorn-21.2.0 mlflow-2.12.1 querystring-parser-1.2.4\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T16:44:51.467533Z","iopub.execute_input":"2024-05-01T16:44:51.468296Z","iopub.status.idle":"2024-05-01T16:44:53.603120Z","shell.execute_reply.started":"2024-05-01T16:44:51.468257Z","shell.execute_reply":"2024-05-01T16:44:53.601530Z"},"trusted":true},"execution_count":104,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}